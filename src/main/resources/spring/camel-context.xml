<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:spring-security="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd                                 http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd                         http://camel.apache.org/schema/spring-security http://camel.apache.org/schema/spring-security/camel-spring-security.xsd                         http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
    <!-- env properties -->
    <bean
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" id="propertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="searchSystemEnvironment" value="true"/>
    </bean>
    <!-- mongodb connection -->
    <bean class="com.mongodb.MongoClient" id="cloudDb">
        <constructor-arg index="0">
            <bean class="com.mongodb.MongoClientURI">
                <constructor-arg index="0" value="mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_SERVICE_HOST}:${MONGODB_SERVICE_PORT}/${MONGODB_DATABASE}"/>
            </bean>
        </constructor-arg>
    </bean>
    <!-- Aggregate Strategy bean -->
    <bean id="countAggregationStrategy" class="net.gmsworld.server.camel.CountAggregateStrategy"/>
    <!-- rest servlet -->
    <bean
        class="org.apache.camel.component.servlet.CamelHttpTransportServlet" id="camelHttpTransportServlet"/>
    <bean
        class="org.springframework.boot.web.servlet.ServletRegistrationBean" id="servlet">
        <property name="name" value="CamelServlet"/>
        <property name="servlet" ref="camelHttpTransportServlet"/>
        <property name="urlMappings" value="/camel/*"/>
    </bean>
    <!-- RBAC -->
    <spring-security:http realm="User Restrict Realm">
        <spring-security:intercept-url
            access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')"
            method="GET" pattern="/camel/v1/**"/>
        <spring-security:intercept-url
            access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')"
            method="POST" pattern="/camel/v1/**"/>
        <spring-security:intercept-url access="hasRole('ROLE_ADMIN')"
            method="DELETE" pattern="/camel/v1/**"/>
        <spring-security:http-basic/>
        <spring-security:remember-me/>
        <spring-security:csrf disabled="true"/>
    </spring-security:http>
    <spring-security:authentication-manager alias="authenticationManager">
        <spring-security:authentication-provider user-service-ref="userDetailsService"/>
    </spring-security:authentication-manager>
    <spring-security:user-service id="userDetailsService" properties="classpath:/users.properties"/>
    <bean
        class="org.springframework.security.access.vote.AffirmativeBased" id="accessDecisionManager">
        <constructor-arg>
            <bean class="org.springframework.security.access.vote.RoleVoter"/>
        </constructor-arg>
        <property name="allowIfAllAbstainDecisions" value="true"/>
    </bean>
    <authorizationPolicy access="ROLE_ADMIN"
        accessDecisionManager="accessDecisionManager"
        authenticationManager="authenticationManager" id="admin" xmlns="http://camel.apache.org/schema/spring-security"/>
    <authorizationPolicy access="ROLE_USER" id="user" xmlns="http://camel.apache.org/schema/spring-security"/>
    <camelContext id="hotels-api" xmlns="http://camel.apache.org/schema/spring">
        <propertyPlaceholder id="properties" location="classpath:/config.properties"/>
        <dataFormats>
            <json id="json" library="Jackson"/>
        </dataFormats>
        <onException>
            <exception>org.apache.camel.CamelAuthorizationException</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log message="Access Denied with the Policy of ${exception.policyId}!"/>
            <transform>
                <simple>Access Denied with the Policy of ${exception.policyId}!</simple>
            </transform>
        </onException>
        <onException>
            <exception>java.lang.Exception</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log loggingLevel="ERROR" message="Operation failed with exception: ${exception.message}"/>
            <transform>
                <simple>${date:now:yyyy.MM.dd HH:mm:ss} ERROR Operation failed with message: ${exception.message}</simple>
            </transform>
        </onException>
        <restConfiguration apiContextPath="api-docs" bindingMode="auto"
            component="servlet" contextPath="/camel" enableCORS="true">
            <apiProperty key="api.title" value="Hotels API"/>
            <apiProperty key="api.version" value="1.0.0"/>
            <apiProperty key="api.contact.email" value="jstakun@redhat.com"/>
            <apiProperty key="host" value="api-hotels.a3c1.starter-us-west-1.openshiftapps.com"/>
            <corsHeaders key="Access-Control-Allow-Headers" value="Authorization, Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers"/>
        </restConfiguration>
        <rest id="production">
            <get uri="/v1/cache/{cid}">
                <description>Retrieve all hotels data</description>
                <param dataType="string" defaultValue="test"
                    description="Hotels collection name" name="cid" type="path"/>
                <responseMessage message="Hotels list that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:getFromCacheUnlimited"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </get>
            <get uri="/v1/cache/{cid}/{limit}">
                <description>Retrieve hotels data with limit</description>
                <param dataType="string" defaultValue="test"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="integer" defaultValue="10"
                    description="Hotels data to return limit"
                    name="limit" type="path"/>
                <responseMessage message="Hotels list that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:getFromCache"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </get>
            <get uri="/v1/count/{cid}">
                <description>Count all hotels</description>
                <param dataType="string" defaultValue="test"
                    description="Hotels collection name" name="cid" type="path"/>
                <responseMessage message="All hotels count"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:getFromCacheCount"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </get>
            <get uri="/v1/one/{cid}/{property}/{value}">
                <description>Retrieve one hotel data by property value</description>
                <param dataType="string" defaultValue="test"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="string" defaultValue="_id"
                    description="Property name" name="property" type="path"/>
                <param dataType="string" defaultValue="1"
                    description="Property value" name="value" type="path"/>
                <responseMessage message="Hotel that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:getByPropertyFromCache"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </get>
            <get uri="/v1/getById/{cid}/{id}">
                <description>Retrieve hotel data by id</description>
                <param dataType="string" defaultValue="test"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="string" defaultValue="1"
                    description="Hotel Id" name="id" type="path"/>
                <responseMessage message="Hotel that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:getByIdFromCache"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </get>
            <get uri="/v1/cache/{cid}/nearby/{lat}/{lng}/{distance}/{limit}">
                <description>Retrieve hotels data in distance from coordinate with limit</description>
                <param dataType="string" defaultValue="hotels"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="number" defaultValue="52.25"
                    description="Latitude" name="lat" type="path"/>
                <param dataType="number" defaultValue="20.95"
                    description="Longitude" name="lng" type="path"/>
                <param dataType="integer" defaultValue="10000"
                    description="Distance in meters" name="distance" type="path"/>
                <param dataType="integer" defaultValue="10"
                    description="Hotels data limit to return"
                    name="limit" type="path"/>
                <responseMessage message="Hotels that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:getNearbyFromCache"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </get>
            <get uri="/v1/cache/{cid}/async/nearby/{lat}/{lng}/{distance}/{limit}">
                <description>Retrieve hotels data in distance from coordinate with limit asynchronous</description>
                <param dataType="string" defaultValue="hotels"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="number" defaultValue="52.25"
                    description="Latitude" name="lat" type="path"/>
                <param dataType="number" defaultValue="20.95"
                    description="Longitude" name="lng" type="path"/>
                <param dataType="integer" defaultValue="10000"
                    description="Distance in meters" name="distance" type="path"/>
                <param dataType="integer" defaultValue="10"
                    description="Hotels data limit to return"
                    name="limit" type="path"/>
                <responseMessage message="Operation status"/>
                <route>
                    <to uri="seda:getNearbyFromCache?waitForTaskToComplete=Never"/>
                    <setBody>
                        <simple>{"status": "ok"}</simple>
                    </setBody>
                    <setHeader headerName="Exchange.CONTENT_TYPE">
                        <constant>application/json</constant>
                    </setHeader>
                </route>
            </get>
            <get uri="/v1/cache/{cid}/cheapest/nearby/{lat}/{lng}/{distance}/{limit}">
                <description>Retrieve cheapest hotels data in distance from coordinate with limit</description>
                <param dataType="string" defaultValue="hotels"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="number" defaultValue="52.25"
                    description="Latitude" name="lat" type="path"/>
                <param dataType="number" defaultValue="20.95"
                    description="Longitude" name="lng" type="path"/>
                <param dataType="integer" defaultValue="10000"
                    description="Distance in meters" name="distance" type="path"/>
                <param dataType="integer" defaultValue="10"
                    description="Hotels data limit to return"
                    name="limit" type="path"/>
                <responseMessage message="Hotels that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:getCheapestNearbyFromCache"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </get>
            <get uri="/v1/cache/{cid}/async/cheapest/nearby/{lat}/{lng}/{distance}/{limit}">
                <description>Retrieve cheapest hotels data in distance from coordinate with limit asynchronous</description>
                <param dataType="string" defaultValue="hotels"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="number" defaultValue="52.25"
                    description="Latitude" name="lat" type="path"/>
                <param dataType="number" defaultValue="20.95"
                    description="Longitude" name="lng" type="path"/>
                <param dataType="integer" defaultValue="10000"
                    description="Distance in meters" name="distance" type="path"/>
                <param dataType="integer" defaultValue="10"
                    description="Hotels data limit to return"
                    name="limit" type="path"/>
                <responseMessage message="Operation status"/>
                <route>
                    <to uri="seda:getCheapestNearbyFromCache?waitForTaskToComplete=Never"/>
                    <setBody>
                        <simple>{"status": "ok"}</simple>
                    </setBody>
                    <setHeader headerName="Exchange.CONTENT_TYPE">
                        <constant>application/json</constant>
                    </setHeader>
                </route>
            </get>
            <get uri="/v1/cache/{cid}/stars/nearby/{lat}/{lng}/{distance}/{limit}">
                <description>Retrieve hotels data by star rating in distance from coordinate with limit</description>
                <param dataType="string" defaultValue="hotels"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="number" defaultValue="52.25"
                    description="Latitude" name="lat" type="path"/>
                <param dataType="number" defaultValue="20.95"
                    description="Longitude" name="lng" type="path"/>
                <param dataType="integer" defaultValue="10000"
                    description="Distance in meters" name="distance" type="path"/>
                <param dataType="integer" defaultValue="10"
                    description="Hotels data limit to return"
                    name="limit" type="path"/>
                <responseMessage message="Hotels that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:getStarsNearbyFromCache"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </get>
            <get uri="/v1/cache/{cid}/async/stars/nearby/{lat}/{lng}/{distance}/{limit}">
                <description>Retrieve hotels data by star rating in distance from coordinate with limit asynchronous</description>
                <param dataType="string" defaultValue="hotels"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="number" defaultValue="52.25"
                    description="Latitude" name="lat" type="path"/>
                <param dataType="number" defaultValue="20.95"
                    description="Longitude" name="lng" type="path"/>
                <param dataType="integer" defaultValue="10000"
                    description="Distance in meters" name="distance" type="path"/>
                <param dataType="integer" defaultValue="10"
                    description="Hotels data limit to return"
                    name="limit" type="path"/>
                <responseMessage message="Operation status"/>
                <route>
                    <to uri="seda:getStarsNearbyFromCache?waitForTaskToComplete=Never"/>
                    <setBody>
                        <simple>{"status": "ok"}</simple>
                    </setBody>
                    <setHeader headerName="Exchange.CONTENT_TYPE">
                        <constant>application/json</constant>
                    </setHeader>
                </route>
            </get>
            <get produces="text/plain" uri="/v1/count/{cid}/nearby/{lat}/{lng}/{distance}">
                <description>Count hotels in distance from coordinate</description>
                <param dataType="string" defaultValue="hotels"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="number" defaultValue="52.25"
                    description="Latitude" name="lat" type="path"/>
                <param dataType="number" defaultValue="20.95"
                    description="Longitude" name="lng" type="path"/>
                <param dataType="integer" defaultValue="10000"
                    description="Distance in meters" name="distance" type="path"/>
                <responseMessage message="Hotels that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:getNearbyFromCacheCount"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </get>
            <post produces="text/plain"
                type="net.gmsworld.server.camel.Feature" uri="/v1/cache/{cid}">
                <description>Save hotel data</description>
                <param dataType="string" defaultValue="test"
                    description="Hotels collection name" name="cid" type="path"/>
                <responseMessage message="Hotels that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:putToCache"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </post>
            <post type="net.gmsworld.server.camel.Feature[]" uri="/v1/cache/multi/{cid}">
                <description>Save multiple hotels data</description>
                <param dataType="string" defaultValue="test"
                    description="Hotels collection name" name="cid" type="path"/>
                <responseMessage message="Hotels that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:putToCacheMulti"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </post>
            <delete produces="text/plain" uri="/v1/cache/{cid}/{property}/{value}">
                <description>Delete hotels data by property value</description>
                <param dataType="string" defaultValue="test"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="string" defaultValue="_id"
                    description="Property name" name="property" type="path"/>
                <param dataType="string" defaultValue="1"
                    description="Property value" name="value" type="path"/>
                <responseMessage message="Deleted Hotels count"/>
                <responseMessage code="404" message="No response received"/>
                <responseMessage code="406" message="Not allowed"/>
                <route>
                    <to uri="direct:deleteFromCache"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </delete>
            <!-- testing -->
            <get uri="/v1/cache/{cid}/{property}/{value}/{limit}">
                <description>Retrieve hotels data by property value with limit</description>
                <param dataType="string" defaultValue="test"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="string" defaultValue="_id"
                    description="Property name" name="property" type="path"/>
                <param dataType="string" defaultValue="1"
                    description="Property value" name="value" type="path"/>
                <param dataType="integer" defaultValue="10"
                    description="Hotels data limit to return"
                    name="limit" type="path"/>
                <responseMessage message="Hotel that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:getByQueryFromCache"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </get>
            <get uri="/v1/cache/{cid}/{property}/{value}">
                <description>Retrieve hotels data by property value</description>
                <param dataType="string" defaultValue="test"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="string" defaultValue="_id"
                    description="Property name" name="property" type="path"/>
                <param dataType="string" defaultValue="1"
                    description="Property value" name="value" type="path"/>
                <responseMessage message="Hotels list that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:getByQueryFromCacheUnlimited"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </get>
            <get uri="/v1/cache/{cid}/sort/{sortBy}/{sortOrder}/{limit}">
                <description>Retrieve hotels data with limit sorted</description>
                <param dataType="string" defaultValue="test"
                    description="Hotels collection name" name="cid" type="path"/>
                <param dataType="string" defaultValue="_id"
                    description="Sort by property" name="sortBy" type="path"/>
                <param dataType="integer" defaultValue="-1"
                    description="Sort order: 1 for asc, -1 for desc"
                    name="sortOrder" type="path">
                    <allowableValues>
                        <value>1</value>
                        <value>-1</value>
                    </allowableValues>
                </param>
                <param dataType="integer" defaultValue="10"
                    description="Hotels data limit to return"
                    name="limit" type="path"/>
                <responseMessage message="Hotels list that was found"/>
                <responseMessage code="404" message="No response received"/>
                <route>
                    <to uri="direct:getFromCacheSorted"/>
                    <filter>
                        <simple>${body} == null</simple>
                        <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                            <constant>404</constant>
                        </setHeader>
                    </filter>
                </route>
            </get>
        </rest>
        <!-- insert -->
        <route id="Put to cache">
            <from id="_from1" uri="direct:putToCache"/>
            <doTry id="_doTry1">
                <log id="_log1" loggingLevel="INFO" message="Putting to cache ${header.cid} document..."/>
                <convertBodyTo id="_convertBodyTo2" type="com.mongodb.DBObject"/>
                <toD id="_toD2" uri="mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=save"/>
                <setBody id="_setBody1">
                    <header>CamelMongoOid</header>
                </setBody>
                <log id="_log2" loggingLevel="INFO" message="Inserted to collection ${header.cid} document with id ${header.CamelMongoOid}."/>
                <doCatch id="_doCatch1">
                    <exception>java.lang.Exception</exception>
                    <handled>
                        <constant>true</constant>
                    </handled>
                    <log id="_log15" loggingLevel="ERROR" message="Operation failed with exception: ${exception.message}"/>
                </doCatch>
            </doTry>
        </route>
        <route id="Put to cache multiple records">
            <from id="_from2" uri="direct:putToCacheMulti"/>
            <log id="_log3" loggingLevel="INFO" message="Putting to cache ${header.cid} multiple documents..."/>
            <split id="_split1" parallelProcessing="true" strategyRef="countAggregationStrategy">
                <simple>body</simple>
                <to id="_to1" uri="direct:putToCache"/>
            </split>
            <to uri="log:DEBUG?showBody=true&amp;showHeaders=true&amp;showProperties=true"/>
            <log id="_log4" loggingLevel="INFO" message="Inserted to collection ${header.cid} ${property.counter} documents."/>
            <setBody id="_setBody2">
                <simple>{"count": ${property.counter}}</simple>
            </setBody>
            <unmarshal id="_unmarshal2" ref="json"/>
        </route>
        <!-- delete -->
        <route id="Delete from cache">
            <from id="_from3" uri="direct:deleteFromCache"/>
            <log id="_log5" loggingLevel="INFO" message="Delete from cache ${header.cid} objects matching ${header.property} : ${header.value}"/>
            <setBody id="_setBody3">
                <simple>{"${header.property}" : "${header.value}"}</simple>
            </setBody>
            <recipientList id="_recipientList2">
                <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=remove</simple>
            </recipientList>
            <to uri="log:DEBUG?showBody=true&amp;showHeaders=true&amp;showProperties=true"/>
            <log id="_log5" loggingLevel="INFO" message="Deleted from cache ${header.cid} ${header.CamelMongoDbRecordsAffected} objects matching ${header.property} : ${header.value}"/>
            <setBody id="_setBody4">
                <header>CamelMongoDbRecordsAffected</header>
            </setBody>
        </route>
        <!-- select -->
        <route id="Get from cache unlimited">
            <from id="_from4" uri="direct:getFromCacheUnlimited"/>
            <setHeader headerName="limit" id="_setHeader1">
                <simple>{{batchLimit}}</simple>
            </setHeader>
            <to id="_to2" uri="direct:getFromCache"/>
        </route>
        <route id="Get from cache">
            <from id="_from5" uri="direct:getFromCache"/>
            <validate id="_validate1">
                <simple>${header.limit} range '1..{{batchLimit}}'</simple>
            </validate>
            <log id="_log6" loggingLevel="INFO" message="Get all from cache ${header.cid} with limit ${header.limit} by user ${header.authorization}"/>
            <setHeader headerName="CamelMongoDbSortBy" id="_setHeader2">
                <!--  descending by _id -->
                <constant>{"_id" : -1}</constant>
            </setHeader>
            <setHeader headerName="CamelMongoDbLimit" id="_setHeader3">
                <simple>${header.limit}</simple>
            </setHeader>
            <setHeader headerName="CamelMongoDbBatchSize" id="_setHeader4">
                <constant>{{batchLimit}}</constant>
            </setHeader>
            <recipientList id="_recipientList3">
                <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findAll</simple>
            </recipientList>
        </route>
        <route id="Get from cache sorted">
            <from id="_from6" uri="direct:getFromCacheSorted"/>
            <validate id="_validate2">
                <simple>${header.limit} range '1..{{batchLimit}}'</simple>
            </validate>
            <log id="_log7" loggingLevel="INFO" message="Get all from cache ${header.cid} with limit ${header.limit} sorted by ${header.sortBy}: ${header.sortOrder}  by user ${header.authorization}"/>
            <setHeader headerName="CamelMongoDbSortBy" id="_setHeader5">
                <simple>{"${header.sortBy}" : ${header.sortOrder}}</simple>
            </setHeader>
            <setHeader headerName="CamelMongoDbLimit" id="_setHeader6">
                <simple>${header.limit}</simple>
            </setHeader>
            <setHeader headerName="CamelMongoDbBatchSize" id="_setHeader7">
                <constant>{{batchLimit}}</constant>
            </setHeader>
            <to id="_to8" uri="log:DEBUG?showBody=true&amp;showHeaders=true&amp;showProperties=true"/>
            <toD uri="mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findAll"/>
        </route>
        <route id="Get from cache count">
            <from id="_from7" uri="direct:getFromCacheCount"/>
            <log id="_log8" loggingLevel="INFO" message="Get count from cache ${header.cid} by user ${header.authorization}"/>
            <recipientList id="_recipientList5">
                <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=count</simple>
            </recipientList>
            <setBody id="_setBody14">
                <simple>{"count": ${body}}</simple>
            </setBody>
            <unmarshal id="_unmarshal1" ref="json"/>
        </route>
        <route id="Get by query from cache unlimited">
            <from id="_from8" uri="direct:getByQueryFromCacheUnlimited"/>
            <setHeader headerName="limit" id="_setHeader8">
                <simple>{{batchLimit}}</simple>
            </setHeader>
            <to id="_to3" uri="direct:getByQueryFromCache"/>
        </route>
        <route id="Get by query from cache">
            <from id="_from9" uri="direct:getByQueryFromCache"/>
            <validate id="_validate3">
                <simple>${header.limit} range '1..{{batchLimit}}'</simple>
            </validate>
            <log id="_log9" loggingLevel="INFO" message="Get from cache ${header.cid} object matching ${header.property} : ${header.value} with limit ${header.limit} by user ${header.authorization}"/>
            <setBody id="_setBody5">
                <simple>{"${header.property}" : "${header.value}"}</simple>
            </setBody>
            <convertBodyTo type="com.mongodb.DBObject"/>
            <setHeader headerName="CamelMongoDbSortBy" id="_setHeader9">
                <simple>{"_id" : -1}</simple>
            </setHeader>
            <setHeader headerName="CamelMongoDbLimit" id="_setHeader10">
                <simple>${header.limit}</simple>
            </setHeader>
            <to uri="log:DEBUG?showBody=true&amp;showHeaders=true&amp;showProperties=true"/>
            <recipientList id="_recipientList6">
                <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findAll</simple>
            </recipientList>
        </route>
        <route id="Get one by property from cache">
            <from id="_from10" uri="direct:getByPropertyFromCache"/>
            <log id="_log10" loggingLevel="INFO" message="Get from cache ${header.cid} object matching ${header.property} : ${header.value} with limit ${header.limit} by user ${header.authorization}"/>
            <setBody id="_setBody6">
                <simple>{"${header.property}" : "${header.value}"}</simple>
            </setBody>
            <convertBodyTo id="_convertBodyTo1" type="com.mongodb.DBObject"/>
            <recipientList id="_recipientList7">
                <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findOneByQuery</simple>
            </recipientList>
        </route>
        <route id="Get one by id from cache">
            <from id="_from11" uri="direct:getByIdFromCache"/>
            <log id="_log11" loggingLevel="INFO" message="Get from cache ${header.cid} object with id : ${header.id} by user ${header.authorization}"/>
            <setBody id="_setBody7">
                <simple>${header.id}</simple>
            </setBody>
            <toD id="_toD1" uri="mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findById"/>
        </route>
        <route id="Get nearby from cache">
            <from id="_from12" uri="direct:getNearbyFromCache"/>
            <validate id="_validate4">
                <simple>${header.limit} range '1..{{nearbyLimit}}'</simple>
            </validate>
            <validate id="_validate5">
                <simple>${header.distance} range '1..{{distanceLimit}}'</simple>
            </validate>
            <log id="_log12" loggingLevel="INFO" message="Get from cache ${header.cid} documents near ${header.lat}, ${header.lng} in max distance ${header.distance} with limit ${header.limit} by user ${header.authorization}"/>
            <setBody id="_setBody8">
                <simple>{ "geometry" : { $near : { $geometry : { type : "Point" , coordinates : [ ${header.lng} , ${header.lat} ] } , $maxDistance : ${header.distance} } } }</simple>
            </setBody>
            <setHeader headerName="CamelMongoDbLimit" id="_setHeader11">
                <simple>${header.limit}</simple>
            </setHeader>
            <recipientList id="_recipientList8">
                <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findAll</simple>
            </recipientList>
        </route>
        <route id="Get most stars nearby from cache">
            <from id="_from13" uri="direct:getStarsNearbyFromCache"/>
            <setHeader headerName="CamelMongoDbSortBy" id="_setHeader12">
                <simple>{"properties.stars" : -1}</simple>
            </setHeader>
            <to id="_to4" uri="direct:getNearbyFromCache"/>
        </route>
        <route id="Get most stars nearby from cache and save">
            <from id="_from14" uri="seda:getStarsNearbyFromCache"/>
            <to id="_to5" uri="direct:getStarsNearbyFromCache"/>
            <setHeader headerName="cid" id="_setHeader13">
                <simple>cache</simple>
            </setHeader>
            <setBody id="_setBody9">
                <simple>{ "type": "FeatureCollection", "properties": { "creationDate": ${bean:java.lang.System?method=currentTimeMillis} }, "_id" : "${header.lng}_${header.lat}_${header.distance}_${header.limit}_stars", "features" : ${body} }</simple>
            </setBody>
            <wireTap id="_wireTap1" uri="direct:putToCache"/>
        </route>
        <route id="Get cheapest nearby from cache">
            <from id="_from15" uri="direct:getCheapestNearbyFromCache"/>
            <validate id="_validate6">
                <simple>${header.limit} range '1..{{nearbyLimit}}'</simple>
            </validate>
            <validate id="_validate7">
                <simple>${header.distance} range '1..{{distanceLimit}}'</simple>
            </validate>
            <log id="_log13" loggingLevel="INFO" message="Get cheapest from cache ${header.cid} documents near ${header.lat}, ${header.lng} in max distance ${header.distance} with limit ${header.limit} by user ${header.authorization}"/>
            <setBody id="_setBody10">
                <simple>{ "properties.minrate" : { $gt : 0 },  "geometry" : { $near : { $geometry : { type : "Point" , coordinates : [ ${header.lng} , ${header.lat} ] } , $maxDistance : ${header.distance} } } }</simple>
            </setBody>
            <setHeader headerName="CamelMongoDbLimit" id="_setHeader14">
                <simple>${header.limit}</simple>
            </setHeader>
            <setHeader headerName="CamelMongoDbSortBy" id="_setHeader15">
                <simple>{"properties.minrate" : 1}</simple>
            </setHeader>
            <recipientList id="_recipientList9">
                <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findAll</simple>
            </recipientList>
        </route>
        <route id="Get cheapest nearby from cache and save">
            <from id="_from16" uri="seda:getCheapestNearbyFromCache"/>
            <to id="_to7" uri="direct:getCheapestNearbyFromCache"/>
            <setHeader headerName="cid" id="_setHeader16">
                <simple>cache</simple>
            </setHeader>
            <setBody id="_setBody11">
                <simple>{ "type": "FeatureCollection", "properties": { "creationDate": ${bean:java.lang.System?method=currentTimeMillis} }, "_id" : "${header.lng}_${header.lat}_${header.distance}_${header.limit}_cheapest", "features" : ${body} }</simple>
            </setBody>
            <wireTap id="_wireTap2" uri="direct:putToCache"/>
        </route>
        <route id="Get nearby from cache count">
            <from id="_from17" uri="direct:getNearbyFromCacheCount"/>
            <log id="_log14" loggingLevel="INFO" message="Get count from cache ${header.cid} documents near ${header.lat}, ${header.lng} in max distance ${header.distance} by user ${header.authorization}"/>
            <setBody id="_setBody12">
                <simple>{ "geometry" : { $near : { $geometry : { type : "Point" , coordinates : [ ${header.lng} , ${header.lat} ] } , $maxDistance : ${header.distance} } } }</simple>
            </setBody>
            <toD id="_toD3" uri="mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=count"/>
        </route>
        <route id="Get nearby from cache and save">
            <from id="_from18" uri="seda:getNearbyFromCache"/>
            <to id="_to9" uri="direct:getNearbyFromCache"/>
            <setHeader headerName="cid" id="_setHeader17">
                <simple>cache</simple>
            </setHeader>
            <setBody id="_setBody13">
                <simple>{ "type": "FeatureCollection", "properties": { "creationDate": ${bean:java.lang.System?method=currentTimeMillis} }, "_id" : "${header.lng}_${header.lat}_${header.distance}_${header.limit}", "features" : ${body} }</simple>
            </setBody>
            <wireTap id="_wireTap3" uri="direct:putToCache"/>
        </route>
    </camelContext>
</beans>
