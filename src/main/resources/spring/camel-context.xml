<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:camel="http://camel.apache.org/schema/spring"
    xmlns:spring-security="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        
                        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
                        http://camel.apache.org/schema/spring-security http://camel.apache.org/schema/spring-security/camel-spring-security.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
  <bean
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" id="propertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="searchSystemEnvironment" value="true"/>
  </bean>
    
  <bean class="com.mongodb.MongoClient" id="cloudDb">
        <constructor-arg index="0">
            <bean class="com.mongodb.MongoClientURI">
                <constructor-arg index="0" value="mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_SERVICE_HOST}:${MONGODB_SERVICE_PORT}/${MONGODB_DATABASE}"/>
            </bean>
        </constructor-arg>
  </bean>

  <bean class="org.apache.camel.component.servlet.CamelHttpTransportServlet" id="camelHttpTransportServlet"/>
  <bean
        class="org.springframework.boot.web.servlet.ServletRegistrationBean" id="servlet">
        <property name="name" value="CamelServlet"/>
        <property name="servlet" ref="camelHttpTransportServlet"/>
        <property name="urlMappings" value="/camel/*"/>
  </bean>
    
  <spring-security:http realm="User Restrict Realm">
    <spring-security:intercept-url pattern="/camel/**"
                                   access="hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')"/>
    <spring-security:http-basic/>
    <spring-security:remember-me/>
  </spring-security:http>
 
  <spring-security:authentication-manager alias="authenticationManager">
    <spring-security:authentication-provider user-service-ref="userDetailsService"/>
  </spring-security:authentication-manager>
 
  <spring-security:user-service id="userDetailsService" properties="classpath:/users.properties"/>
 
  <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
    <constructor-arg>
      <bean class="org.springframework.security.access.vote.RoleVoter"/>
    </constructor-arg>
    <property name="allowIfAllAbstainDecisions" value="true"/>
  </bean>
 
  <authorizationPolicy id="admin" access="ROLE_ADMIN"
                       authenticationManager="authenticationManager"
                       accessDecisionManager="accessDecisionManager"
                       xmlns="http://camel.apache.org/schema/spring-security"/>
 
  <authorizationPolicy id="user" access="ROLE_USER"
                       xmlns="http://camel.apache.org/schema/spring-security"/>


  <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">
        <propertyPlaceholder id="properties" location="classpath:/config.properties"/>
  
   <dataFormats>
     <json library="Jackson" id="json"/>
   </dataFormats>
  
   <onException>
     <exception>org.apache.camel.CamelAuthorizationException</exception>
     <handled>
        <constant>true</constant>
     </handled>
     <log message="Access Denied with the Policy of ${exception.policyId}!"/>
     <transform>
        <simple>Access Denied with the Policy of ${exception.policyId}!</simple>
     </transform>
   </onException>
  
   <onException>  
     <exception>java.lang.Exception</exception>
     <handled>
          <constant>true</constant>
     </handled>
     <log message="Operation failed with exception: ${exception.stacktrace}" loggingLevel="ERROR" logName="com.redhat.waw.camel"/>
     <transform>
          <simple>${date:now:yyyy.MM.dd HH:mm:ss} ERROR Operation failed with message: ${exception.message}</simple>
     </transform>
   </onException>
  
   <restConfiguration component="servlet" contextPath="/camel" bindingMode="auto"/>
  
   <rest>
    
    <get uri="/v1/cache/{cid}">
      <to uri="direct:getFromCacheUnlimited"/>
    </get>
    <get uri="/v1/cache/{cid}/{limit}">
      <to uri="direct:getFromCache"/>
    </get>
    <get uri="/v1/cache/{cid}/{sortBy}/{sortOrder}/{limit}">
      <to uri="direct:getFromCacheSorted"/>
    </get>
    <get uri="/v1/count/{cid}">
      <to uri="direct:getFromCacheCount"/>
    </get>
    <get uri="/v1/cache/{cid}/{property}/{value}">
      <to uri="direct:getByQueryFromCacheUnlimited"/>
    </get>
    <get uri="/v1/one/{cid}/{property}/{value}">
      <to uri="direct:getByPropertyFromCache"/>
    </get>
    <get uri="/v1/getById/{cid}/{value}">
      <to uri="direct:getByIdFromCache"/>
    </get>
    <get uri="/v1/cache/{cid}/{property}/{value}/{limit}">
      <to uri="direct:getByQueryFromCache"/>
    </get>
    <get uri="/v1/cache/{cid}/nearby/{lat}/{lng}/{distance}/{limit}">
      <to uri="direct:getNearbyFromCache"/>
    </get>
    <get uri="/v1/cache/{cid}/async/nearby/{lat}/{lng}/{distance}/{limit}">
      <to uri="seda:getNearbyFromCache?waitForTaskToComplete=Never"/>
    </get>
    <get uri="/v1/cache/{cid}/cheapest/nearby/{lat}/{lng}/{distance}/{limit}">
      <to uri="direct:getCheapestNearbyFromCache"/>
    </get>
    <get uri="/v1/cache/{cid}/async/cheapest/nearby/{lat}/{lng}/{distance}/{limit}">
      <to uri="seda:getCheapestNearbyFromCache?waitForTaskToComplete=Never"/>
    </get>
    <get uri="/v1/cache/{cid}/stars/nearby/{lat}/{lng}/{distance}/{limit}">
      <to uri="direct:getStarsNearbyFromCache"/>
    </get>
    <get uri="/v1/cache/{cid}/async/stars/nearby/{lat}/{lng}/{distance}/{limit}">
      <to uri="seda:getStarsNearbyFromCache?waitForTaskToComplete=Never"/>
    </get>
    <get uri="/v1/count/{cid}/nearby/{lat}/{lng}/{distance}">
      <to uri="direct:getNearbyFromCacheCount"/>
    </get>
    
    <post uri="/v1/cache/{cid}">
      <to uri="direct:putToCache"/>
    </post>
    <post uri="/v1/cache/multi/{cid}">
      <to uri="direct:putToCacheMulti"/>
    </post>
    
    <delete uri="/v1/cache/{cid}/{property}/{value}">
      <to uri="direct:deleteFromCache"/>
    </delete>
  
   </rest>
  
   <!-- insert -->
  
   <route id="Put to cache">
    <from uri="direct:putToCache"/>
    <log message="Putting to cache ${header.cid} document..." loggingLevel="INFO"/>
    <recipientList>
      <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=save</simple>
    </recipientList>
    <setBody>
      <header>CamelMongoOid</header>
    </setBody>
    <log message="Inserted to collection ${header.cid} document with id ${header.CamelMongoOid}." loggingLevel="INFO"/>
   </route>
  
  <route id="Put to cache multiple records">
    <from uri="direct:putToCacheMulti"/>
    <log message="Putting to cache ${header.cid} multiple documents..." loggingLevel="INFO"/>
    <marshal ref="json"/>
    <split parallelProcessing="true">
      <method>net.gmsworld.server.camel.JsonArraySplitter</method>
      <to uri="direct:putToCache"/>
    </split>
    <log message="Inserted to collection ${header.cid} multiple documents." loggingLevel="INFO"/>
    <setBody>
      <simple>{"status" : "ok"}</simple>
    </setBody>
  </route>
  
  <!-- delete -->
  
  <route id="Delete from cache">
    <from uri="direct:deleteFromCache"/>
    <log message="Delete from cache ${header.cid} objects matching ${header.property} : ${header.value}" loggingLevel="INFO"/>
    <setBody>
      <simple>{"${header.property}" : "${header.value}"}</simple>
    </setBody>
    <recipientList>
      <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=remove</simple>
    </recipientList>
    <setBody>
      <header>CamelMongoDbRecordsAffected</header>
    </setBody>
  </route>
  
  <!-- select -->
  
  <route id="Get from cache unlimited">
    <from uri="direct:getFromCacheUnlimited"/>
    <setHeader headerName="limit">
      <simple>{{batchLimit}}</simple>
    </setHeader>
    <to uri="direct:getFromCache"/>
  </route>
  
  <route id="Get from cache">
    <from uri="direct:getFromCache"/>
    <validate>
      <simple>${header.limit} range '1..{{batchLimit}}'</simple>
    </validate>
    <log message="Get all from cache ${header.cid} with limit ${header.limit} by user ${header.authorization}" loggingLevel="INFO"/>
    <setHeader headerName="CamelMongoDbSortBy">
      <!--  descending by _id -->
      <constant>{"_id" : -1}</constant>
    </setHeader>
    <setHeader headerName="CamelMongoDbLimit">
      <simple>${header.limit}</simple>
    </setHeader>
    <setHeader headerName="CamelMongoDbBatchSize">
      <constant>{{batchLimit}}</constant>
    </setHeader>
    <recipientList>
      <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findAll</simple>
    </recipientList>
  </route>
  
  <route id="Get from cache sorted">
    <from uri="direct:getFromCacheSorted"/>
    <validate>
      <simple>${header.limit} range '1..{{batchLimit}}'</simple>
    </validate>
    <log message="Get all from cache ${header.cid} with limit ${header.limit} sorted by ${header.sortBy}: ${header.sortOrder}  by user ${header.authorization}" loggingLevel="INFO"/>
    <setHeader headerName="CamelMongoDbSortBy">
      <simple>{"${header.sortBy}" : ${header.sortOrder}}</simple>
    </setHeader>
    <setHeader headerName="CamelMongoDbLimit">
      <simple>${header.limit}</simple>
    </setHeader>
    <setHeader headerName="CamelMongoDbBatchSize">
      <constant>{{batchLimit}}</constant>
    </setHeader>
    <recipientList>
      <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findAll</simple>
    </recipientList>
  </route>
  
  <route id="Get from cache count">
    <from uri="direct:getFromCacheCount"/>
    <log message="Get count from cache ${header.cid} by user ${header.authorization}" loggingLevel="INFO"/>
    <recipientList>
      <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=count</simple>
    </recipientList>
  </route>
  
  <route id="Get by query from cache unlimited">
    <from uri="direct:getByQueryFromCacheUnlimited"/>
    <setHeader headerName="limit">
      <simple>{{batchLimit}}</simple>
    </setHeader>
    <to uri="direct:getByQueryFromCache"/>
  </route>
  
  <route id="Get by query from cache">
    <from uri="direct:getByQueryFromCache"/>
    <validate>
      <simple>${header.limit} range '1..{{batchLimit}}'</simple>
    </validate>
    <log message="Get from cache ${header.cid} object matching ${header.property} : ${header.value} with limit ${header.limit} by user ${header.authorization}" loggingLevel="INFO"/>
    <setBody>
      <simple>{"${header.property}" : "${header.value}"}</simple>
    </setBody>
    <setHeader headerName="CamelMongoDbSortBy">
      <simple>{"_id" : -1}</simple>
    </setHeader>
    <setHeader headerName="CamelMongoDbLimit">
      <simple>${header.limit}</simple>
    </setHeader>
    <recipientList>
      <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findAll</simple>
    </recipientList>
  </route>
  
  <route id="Get one by property from cache">
    <from uri="direct:getByPropertyFromCache"/>
    <log message="Get from cache ${header.cid} object matching ${header.property} : ${header.value} with limit ${header.limit} by user ${header.authorization}" loggingLevel="INFO"/>
    <setBody>
      <simple>{"${header.property}" : "${header.value}"}</simple>
    </setBody>
    <convertBodyTo type="com.mongodb.DBObject"/>
    <recipientList>
        <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findOneByQuery</simple>
     </recipientList>
  </route>
  
  <route id="Get one by id from cache">
    <from uri="direct:getByIdFromCache"/>
    <log message="Get from cache ${header.cid} object with id : ${header.value} by user ${header.authorization}" loggingLevel="INFO"/>
    <setBody>
      <simple>"${header.value}"</simple>
    </setBody>
    <toD uri="mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findById"/>
  </route>
  
  <route id="Get nearby from cache">
    <from uri="direct:getNearbyFromCache"/>
    <validate>
      <simple>${header.limit} range '1..{{nearbyLimit}}'</simple>
    </validate>
    <validate>
      <simple>${header.distance} range '1..{{distanceLimit}}'</simple>
    </validate>
    <log message="Get from cache ${header.cid} documents near ${header.lat}, ${header.lng} in max distance ${header.distance} with limit ${header.limit} by user ${header.authorization}" loggingLevel="INFO"/>
    <setBody>
      <simple>{ "geometry" : { $near : { $geometry : { type : "Point" , coordinates : [ ${header.lng} , ${header.lat} ] } , $maxDistance : ${header.distance} } } }</simple>
    </setBody>
    <setHeader headerName="CamelMongoDbLimit">
      <simple>${header.limit}</simple>
    </setHeader>
    <recipientList>
      <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findAll</simple>
    </recipientList>
  </route>
  
  <route id="Get most stars nearby from cache">
  	<from uri="direct:getStarsNearbyFromCache" />
  	<setHeader headerName="CamelMongoDbSortBy">
      <simple>{"properties.stars" : -1}</simple> 
    </setHeader>
    <to uri="direct:getNearbyFromCache"/>
  </route>
  
  <route id="Get most stars nearby from cache and save">
    <from uri="seda:getStarsNearbyFromCache"/>
    <to uri="direct:getStarsNearbyFromCache"/>
    <setHeader headerName="cid">
      <simple>cache</simple>
    </setHeader>
    <setBody>
      <simple>{ "type": "FeatureCollection", "properties": { "creationDate": ${bean:java.lang.System?method=currentTimeMillis} }, "_id" : "${header.lng}_${header.lat}_${header.distance}_${header.limit}_stars", "features" : ${body} }</simple>	
    </setBody>
    <to uri="direct:putToCache"/>
  </route>
  
  <route id="Get cheapest nearby from cache">
    <from uri="direct:getCheapestNearbyFromCache"/>
    <validate>
      <simple>${header.limit} range '1..{{nearbyLimit}}'</simple>
    </validate>
    <validate>
      <simple>${header.distance} range '1..{{distanceLimit}}'</simple>
    </validate>
    <log message="Get cheapest from cache ${header.cid} documents near ${header.lat}, ${header.lng} in max distance ${header.distance} with limit ${header.limit} by user ${header.authorization}" loggingLevel="INFO"/>
    <setBody>
      <simple>{ "properties.minrate" : { $gt : 0 },  "geometry" : { $near : { $geometry : { type : "Point" , coordinates : [ ${header.lng} , ${header.lat} ] } , $maxDistance : ${header.distance} } } }</simple>
    </setBody>
    <setHeader headerName="CamelMongoDbLimit">
      <simple>${header.limit}</simple>
    </setHeader>
    <setHeader headerName="CamelMongoDbSortBy">
      <simple>{"properties.minrate" : 1}</simple>
    </setHeader>
    <recipientList>
      <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=findAll</simple>
    </recipientList>
  </route>
  
  <route id="Get cheapest nearby from cache and save">
    <from uri="seda:getCheapestNearbyFromCache"/>
    <to uri="direct:getCheapestNearbyFromCache"/>
    <setHeader headerName="cid">
      <simple>cache</simple>
    </setHeader>
    <setBody>
      <simple>{ "type": "FeatureCollection", "properties": { "creationDate": ${bean:java.lang.System?method=currentTimeMillis} }, "_id" : "${header.lng}_${header.lat}_${header.distance}_${header.limit}_cheapest", "features" : ${body} }</simple>	
    </setBody>
    <to uri="direct:putToCache"/>
  </route>
  
  <route id="Get nearby from cache count">
    <from uri="direct:getNearbyFromCacheCount"/>
    <log message="Get count from cache ${header.cid} documents near ${header.lat}, ${header.lng} in max distance ${header.distance} by user ${header.authorization}" loggingLevel="INFO"/>
    <setBody>
      <simple>{ "geometry" : { $near : { $geometry : { type : "Point" , coordinates : [ ${header.lng} , ${header.lat} ] } , $maxDistance : ${header.distance} } } }</simple>
    </setBody>
    <recipientList>
      <simple>mongodb:cloudDb?database=${sysenv.MONGODB_DATABASE}&amp;collection=${header.cid}&amp;operation=count</simple>
    </recipientList>
  </route>
  
  <route id="Get nearby from cache and save">
    <from uri="seda:getNearbyFromCache"/>
    <to uri="direct:getNearbyFromCache"/>
    <setHeader headerName="cid">
      <simple>cache</simple>
    </setHeader>
    <setBody>
      <simple>{ "type": "FeatureCollection", "properties": { "creationDate": ${bean:java.lang.System?method=currentTimeMillis} }, "_id" : "${header.lng}_${header.lat}_${header.distance}_${header.limit}", "features" : ${body} }</simple>	
    </setBody>
    <to uri="direct:putToCache"/>
  </route>

    </camelContext>
</beans>
